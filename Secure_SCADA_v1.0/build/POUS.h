#include "beremiz.h"
#ifndef __POUS_H
#define __POUS_H

#include "accessor.h"
#include "iec_std_lib.h"

__DECLARE_ENUMERATED_TYPE(LOGLEVEL,
  LOGLEVEL__CRITICAL,
  LOGLEVEL__WARNING,
  LOGLEVEL__INFO,
  LOGLEVEL__DEBUG
)
// FUNCTION_BLOCK LOGGER
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,TRIG)
  __DECLARE_VAR(STRING,MSG)
  __DECLARE_VAR(LOGLEVEL,LEVEL)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,TRIG0)

} LOGGER;

void LOGGER_init__(LOGGER *data__, BOOL retain);
// Code part
void LOGGER_body__(LOGGER *data__);
// FUNCTION_BLOCK PYTHON_EVAL
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,TRIG)
  __DECLARE_VAR(STRING,CODE)
  __DECLARE_VAR(BOOL,ACK)
  __DECLARE_VAR(STRING,RESULT)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(DWORD,STATE)
  __DECLARE_VAR(STRING,BUFFER)
  __DECLARE_VAR(STRING,PREBUFFER)
  __DECLARE_VAR(BOOL,TRIGM1)
  __DECLARE_VAR(BOOL,TRIGGED)

} PYTHON_EVAL;

void PYTHON_EVAL_init__(PYTHON_EVAL *data__, BOOL retain);
// Code part
void PYTHON_EVAL_body__(PYTHON_EVAL *data__);
// FUNCTION_BLOCK PYTHON_POLL
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,TRIG)
  __DECLARE_VAR(STRING,CODE)
  __DECLARE_VAR(BOOL,ACK)
  __DECLARE_VAR(STRING,RESULT)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(DWORD,STATE)
  __DECLARE_VAR(STRING,BUFFER)
  __DECLARE_VAR(STRING,PREBUFFER)
  __DECLARE_VAR(BOOL,TRIGM1)
  __DECLARE_VAR(BOOL,TRIGGED)

} PYTHON_POLL;

void PYTHON_POLL_init__(PYTHON_POLL *data__, BOOL retain);
// Code part
void PYTHON_POLL_body__(PYTHON_POLL *data__);
// FUNCTION_BLOCK PYTHON_GEAR
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(UINT,N)
  __DECLARE_VAR(BOOL,TRIG)
  __DECLARE_VAR(STRING,CODE)
  __DECLARE_VAR(BOOL,ACK)
  __DECLARE_VAR(STRING,RESULT)

  // FB private variables - TEMP, private and located variables
  PYTHON_EVAL PY_EVAL;
  __DECLARE_VAR(UINT,COUNTER)
  __DECLARE_VAR(UINT,_TMP_ADD10_OUT)
  __DECLARE_VAR(BOOL,_TMP_EQ13_OUT)
  __DECLARE_VAR(UINT,_TMP_SEL15_OUT)
  __DECLARE_VAR(BOOL,_TMP_AND7_OUT)

} PYTHON_GEAR;

void PYTHON_GEAR_init__(PYTHON_GEAR *data__, BOOL retain);
// Code part
void PYTHON_GEAR_body__(PYTHON_GEAR *data__);
// FUNCTION_BLOCK TP_WITH_RESET
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(TIME,PT)
  __DECLARE_VAR(BOOL,RESET)
  __DECLARE_VAR(BOOL,Q)
  __DECLARE_VAR(TIME,ET)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(SINT,STATE)
  __DECLARE_VAR(BOOL,PREV_IN)
  __DECLARE_VAR(TIME,CURRENT_TIME)
  __DECLARE_VAR(TIME,START_TIME)

} TP_WITH_RESET;

void TP_WITH_RESET_init__(TP_WITH_RESET *data__, BOOL retain);
// Code part
void TP_WITH_RESET_body__(TP_WITH_RESET *data__);
// PROGRAM APLHA
// Data part
typedef struct {
  // PROGRAM Interface - IN, OUT, IN_OUT variables

  // PROGRAM private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,PWR_PLANT_SWITCH)
  __DECLARE_VAR(BOOL,PWR_PLANT)
  __DECLARE_VAR(BOOL,PWR_GEN)
  __DECLARE_VAR(BOOL,PWR_BUILDINGS_ON)
  __DECLARE_VAR(BOOL,PWR_BUILDINGS_OFF)
  __DECLARE_VAR(BOOL,PWR_HOSPITAL_ON)
  __DECLARE_VAR(BOOL,PWR_HOSPITAL_OFF)
  __DECLARE_VAR(BOOL,ALARM)
  __DECLARE_VAR(BOOL,ALARM_START)
  __DECLARE_VAR(BOOL,ALARM_RESET)
  TP_WITH_RESET TP_WITH_RESET0;
  TP TP0;
  __DECLARE_VAR(INT,INPUT_VALUE_GEN)
  __DECLARE_VAR(INT,INPUT_VALUE_PWR)
  __DECLARE_VAR(INT,THRESHOLD_MIN_GEN)
  __DECLARE_VAR(INT,THRESHOLD_MIN_PWR)
  __DECLARE_VAR(BOOL,THRESHOLD_MIN_OUTPUT_GEN)
  __DECLARE_VAR(BOOL,THRESHOLD_MIN_OUTPUT_PWR)
  CTU CTU0;
  __DECLARE_VAR(BOOL,TEMP_UP)
  __DECLARE_VAR(BOOL,TEMP_DOWN)
  __DECLARE_VAR(INT,MAX_TEMP)
  __DECLARE_VAR(INT,CURRENT_TEMP)
  __DECLARE_VAR(BOOL,TEMP_PULSE)
  TP TP2;
  TP_WITH_RESET TP_WITH_RESET1;
  __DECLARE_VAR(INT,TEMP_THRESHOLD)
  __DECLARE_VAR(BOOL,TEMP_ALARM)
  __DECLARE_VAR(BOOL,MAX_TEMP_ALARM)
  __DECLARE_VAR(INT,GEN_FULL)
  __DECLARE_VAR(INT,FUEL_VALUE)
  __DECLARE_VAR(BOOL,GEN_EMPTY)
  __DECLARE_VAR(BOOL,GEN_EMPTY_PULSE)
  CTD CTD0;
  TP TP1;
  TP TP3;
  __DECLARE_VAR(BOOL,FUEL_RESET)
  __DECLARE_VAR(INT,MAX_PWR_PLANT)
  __DECLARE_VAR(BOOL,VAPE_SMOKE)
  TON TON0;
  __DECLARE_VAR(BOOL,PWR_PLANT_BROKE)
  R_TRIG R_TRIG1;
  R_TRIG R_TRIG2;
  __DECLARE_VAR(BOOL,_TMP_GT5_OUT)
  __DECLARE_VAR(BOOL,_TMP_GT92_OUT)
  __DECLARE_VAR(BOOL,_TMP_GT12_OUT)
  __DECLARE_VAR(BOOL,_TMP_GT22_OUT)

} APLHA;

void APLHA_init__(APLHA *data__, BOOL retain);
// Code part
void APLHA_body__(APLHA *data__);
#endif //__POUS_H
